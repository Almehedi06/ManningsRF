# -*- coding: utf-8 -*-
"""Mannings_RF_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZSDGTztJZBBBqBBSCxQtEDG6AAOZ2kE3
"""

# Commented out IPython magic to ensure Python compatibility.
#Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
sns.set(color_codes=True)
from sklearn import metrics
from sklearn.metrics import mean_squared_error
from math import sqrt
from numpy import mean, std
from google.colab import drive

pip install git+https://github.com/ThibHlln/hydroeval.git

import hydroeval as he

#Mount google drive
drive.mount('/content/drive')

#Import dataset
df = pd.read_csv('/content/drive/My Drive/Mannings Data/Mannings Data with C and Yr.csv')

#Input transformation

df['Transformed_b0_clay']=np.log((df['b0_clay']))

df['Transformed_b10_clay']=np.log((df['b0_clay']))

df['Transformed_b10_sand']=np.log((df['b10_sand']))

df['Transformed_Silt_101']=np.log((df['Silt_101']))

df['Transformed_Developed']=np.sqrt((df['Developed']))

df['Transformed_sinuosity']=np.log((df['sinuosity']))

df['Transformed_Forest']=np.sqrt((df['Forest']))

df['Transformed_Agriculture']=np.sqrt((df['Agriculture']))

"""#Manning's n"""

# Input/output
df_xs = df[['NDVI', 'AreaSqKM', 'b0_sand', 'AI', 'CAT_STRM_DENS', 'Transformed_Forest', 'Transformed_Agriculture', 'MEANELEVSMO', 'Transformed_b0_clay', 'Transformed_b10_clay', 'Transformed_b10_sand', 'Transformed_Silt_101', 'Transformed_Developed', 'Transformed_sinuosity', 'StreamOrde', 'D50 (mm)', 'q_va', 'mannings n']]

X = df_xs[['NDVI', 'AreaSqKM', 'b0_sand', 'AI', 'CAT_STRM_DENS', 'Transformed_Forest', 'Transformed_Agriculture', 'MEANELEVSMO', 'Transformed_b0_clay', 'Transformed_b10_clay', 'Transformed_b10_sand', 'Transformed_Silt_101', 'Transformed_Developed', 'Transformed_sinuosity', 'StreamOrde', 'D50 (mm)', 'q_va']]
y = df_xs[['mannings n']]

#Train/test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=42)

# Fitting Random Forest model to the dataset
from sklearn.datasets import make_regression
from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 100, min_samples_split = 6, min_samples_leaf = 1, max_features = 'sqrt', max_depth = 99, bootstrap = True, random_state = 0)
regressor.fit(X_train, y_train)

#Prediction for train and test set
ypred_train=regressor.predict(X_train)
ypred_test = regressor.predict(X_test)

# Model Evaluation
R2_n = metrics.r2_score(y_test, ypred_test)
NSE_n = he.evaluator(he.nse, ypred_test, y_test)
rmse_n = sqrt(mean_squared_error(y_test, ypred_test))

print(f'Model performances for n\nR\u00B2: {R2_n}\nNSE: {NSE_n[0]}\nRMSE: {rmse_n}')

"""#Chezy C"""

#Target is C
y = df[['C']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=42)
regressor = RandomForestRegressor(n_estimators = 100, min_samples_split = 6, min_samples_leaf = 1, max_features = 'sqrt', max_depth = 99, bootstrap = True, random_state = 0)
regressor.fit(X_train, y_train)

ypred_train=regressor.predict(X_train)
ypred_test = regressor.predict(X_test)

R2_C = metrics.r2_score(y_test, ypred_test)
NSE_C = he.evaluator(he.nse, ypred_test, y_test)
rmse_C = sqrt(mean_squared_error(y_test, ypred_test))

print(f'Model performances for C\nR\u00B2: {R2_C}\nNSE: {NSE_C[0]}\nRMSE: {rmse_C}')

"""#Keulegan Y<sub>r</sub>"""

#Target is Yr
y = df[['Yr']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=42)
regressor = RandomForestRegressor(n_estimators = 100, min_samples_split = 6, min_samples_leaf = 1, max_features = 'sqrt', max_depth = 99, bootstrap = True, random_state = 0)
regressor.fit(X_train, y_train)

ypred_train=regressor.predict(X_train)
ypred_test = regressor.predict(X_test)

R2_Y_r = metrics.r2_score(y_test, ypred_test)
NSE_Y_r = he.evaluator(he.nse, ypred_test, y_test)
rmse_Y_r = sqrt(mean_squared_error(y_test, ypred_test))

print(f'Model performances for Yr\nR²: {R2_Y_r}\nNSE: {NSE_Y_r[0]}\nRMSE: {rmse_Y_r}')

#Final output
data = [
    ["For n", f"{R2_n}", f"{NSE_n[0]}", f"{rmse_n}"],
    ["For C", f"{R2_C}", f"{NSE_C[0]}", f"{rmse_C}"],
    ["For Yr", f"{R2_Y_r}", f"{NSE_Y_r[0]}", f"{rmse_Y_r}"]
]

print(tabulate(data, headers=["Model Performances", "R²", "NSE", "RMSE"], tablefmt="fancy_grid"))